<!doctype HTML>
<html>
<meta http-equiv="Content-Type" content="text/html; charset=Shift_JIS">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Script-Type" content="text/javascript">
<title>My Little Pony Favourite Character Sorter</title>
<script type="text/javascript">
var namMember = [
	"Twilight Sparkle",
	"Rainbow Dash",
	"Fluttershy",
	"Rarity",
	"Applejack",
	"Pinkie Pie",
	"Spike",
	"Starlight Glimmer",
	"Sweetie Belle",
	"Apple Bloom",
	"Scootaloo",
	"Princess Celestia",
	"Princess Luna",
	"Princess Cadence",
	"Flurry Heart",
	"Shining Armor",
	"Trixie",
	"Maud Pie",
	"Nightmare Moon",
	"Discord",
	"Queen Chrysalis",
	"King Sombra",
	"Tempest Shadow",
	"Starswirl the Bearded",
	"Thorax",
	"Cheerilee",
	"Big Macintosh",
	"Granny Smith",
	"Flim & Flim",
	"Diamond Tiara",
	"Silver Spoon",
	"Pipsqueak",
	"Iron Will",
	"Lyra",
	"Bon Bon",
	"Derpy",
	"Rose Luck",
	"Minuette",
	"Dr. Hooves",
	"Octavia",
	"Berry Punch",
	"Vinyl Scratch / DJ Pon-3",
	"Carrot Top",
	"Zecora",
	"Soarin'",
	"Spitfire",
	"Braeburn",
	"Babs Seed",
	"Twist",
	"Gilda",
	"Bulk Biceps",
	"Lightning Dust",
	"Photo Finish",
	"Hoity Toity",
	"Fancy Pants",
];

//*********************************************************

var lstMember = new Array();
var parent = new Array();
var equal = new Array();
var rec = new Array();
var cmp1,cmp2;
var head1,head2;
var nrec;

var numQuestion;
var totalSize;
var finishSize;
var finishFlag;

//The initialization of the variable+++++++++++++++++++++++++++++++++++++++++++++
function initList(){
	var n = 0;
	var mid;
	var i;

	//The sequence that you should sort
	lstMember[n] = new Array();
	for (i=0; i<namMember.length; i++) {
		lstMember[n][i] = i;
	}
	parent[n] = -1;
	totalSize = 0;
	n++;

	for (i=0; i<lstMember.length; i++) {
		//And element divides it in two/more than two
		//Increase divided sequence of last in first member
		if(lstMember[i].length>=2) {
			mid = Math.ceil(lstMember[i].length/2);
			lstMember[n] = new Array();
			lstMember[n] = lstMember[i].slice(0,mid);
			totalSize += lstMember[n].length;
			parent[n] = i;
			n++;
			lstMember[n] = new Array();
			lstMember[n] = lstMember[i].slice(mid,lstMember[i].length);
			totalSize += lstMember[n].length;
			parent[n] = i;
			n++;
		}
	}

	//Preserve this sequence
	for (i=0; i<namMember.length; i++) {
		rec[i] = 0;
	}
	nrec = 0;

	//List that keeps your results
	//Value of link initial
	// Value of link initial
	for (i=0; i<=namMember.length; i++) {
		equal[i] = -1;
	}

	cmp1 = lstMember.length-2;
	cmp2 = lstMember.length-1;
	head1 = 0;
	head2 = 0;
	numQuestion = 1;
	finishSize = 0;
	finishFlag = 0;
}

//&#12522;&#12473;&#12488;&#12398;&#12477;&#12540;&#12488;+++++++++++++++++++++++++++++++++++++++++++
//flag&#65306;Don't know characters
//  -1&#65306;Chose the left
//   0&#65306;Tie
//   1&#65306;Chose the right
function sortList(flag){
	var i;
	var str;

	//rec preservation
	if (flag<0) {
		rec[nrec] = lstMember[cmp1][head1];
		head1++;
		nrec++;
		finishSize++;
		while (equal[rec[nrec-1]]!=-1) {
			rec[nrec] = lstMember[cmp1][head1];
			head1++;
			nrec++;
			finishSize++;
		}
	}
	else if (flag>0) {
		rec[nrec] = lstMember[cmp2][head2];
		head2++;
		nrec++;
		finishSize++;
		while (equal[rec[nrec-1]]!=-1) {
			rec[nrec] = lstMember[cmp2][head2];
			head2++;
			nrec++;
			finishSize++;
		}
	}
	else {
		rec[nrec] = lstMember[cmp1][head1];
		head1++;
		nrec++;
		finishSize++;
		while (equal[rec[nrec-1]]!=-1) {
			rec[nrec] = lstMember[cmp1][head1];
			head1++;
			nrec++;
			finishSize++;
		}
		equal[rec[nrec-1]] = lstMember[cmp2][head2];
		rec[nrec] = lstMember[cmp2][head2];
		head2++;
		nrec++;
		finishSize++;
		while (equal[rec[nrec-1]]!=-1) {
			rec[nrec] = lstMember[cmp2][head2];
			head2++;
			nrec++;
			finishSize++;
		}
	}

	//Processing after finishing with one list
	if (head1<lstMember[cmp1].length && head2==lstMember[cmp2].length) {
		//List the remainder of cmp2 copies, list cmp1 copies when finished scanning
		while (head1<lstMember[cmp1].length){
			rec[nrec] = lstMember[cmp1][head1];
			head1++;
			nrec++;
			finishSize++;
		}
	}
	else if (head1==lstMember[cmp1].length && head2<lstMember[cmp2].length) {
		//List the remainder of cmp1 copies, list cmp2 copies when finished scanning
		while (head2<lstMember[cmp2].length){
			rec[nrec] = lstMember[cmp2][head2];
			head2++;
			nrec++;
			finishSize++;
		}
	}

	//When it arrives at the end of both lists
	//Update a pro list
	if (head1==lstMember[cmp1].length && head2==lstMember[cmp2].length) {
		for (i=0; i<lstMember[cmp1].length+lstMember[cmp2].length; i++) {
			lstMember[parent[cmp1]][i] = rec[i];
		}
		lstMember.pop();
		lstMember.pop();
		cmp1 = cmp1-2;
		cmp2 = cmp2-2;
		head1 = 0;
		head2 = 0;

		//Initialize the rec before performing the new comparison
		if (head1==0 && head2==0) {
			for (i=0; i<namMember.length; i++) {
				rec[i] = 0;
			}
			nrec = 0;
		}
	}

	if (cmp1<0) {
		str = "Battle No."+(numQuestion-1)+"<br>"+Math.floor(finishSize*100/totalSize)+"% sorted.";
		document.getElementById("battleNumber").innerHTML = str;

		showResult();
		finishFlag = 1;
	}
	else {
		showImage();
	}
}

//The results+++++++++++++++++++++++++++++++++++++++++++++++
//&#38918;&#20301;=Rank/Grade/Position/Standing/Status
//&#21517;&#21069;=Identification term
function showResult() {
	var ranking = 1;
	var sameRank = 1;
	var table = document.createElement("table");
	table.className = "results";
	
	var thead = table.appendChild(document.createElement("thead"));
	var row = thead.insertRow(-1);
	row.appendChild(document.createElement("th")).textContent = "Rank";
	row.appendChild(document.createElement("td")).textContent = "Character";
	
	var tbody = table.appendChild(document.createElement("tbody"));
	for (var i=0; i<namMember.length; i++) {
		row = tbody.insertRow(-1);
		row.appendChild(document.createElement("th")).textContent = ranking;
		row.appendChild(document.createElement("td")).textContent = namMember[lstMember[0][i]];
		
		if (i<namMember.length-1) {
			if (equal[lstMember[0][i]]==lstMember[0][i+1]) {
				sameRank++;
			} else {
				ranking += sameRank;
				sameRank = 1;
			}
		}
	}

	var container = document.getElementById("resultField");
	container.innerHTML = "";
	container.appendChild(table);
}

//Indicates two elements to compare+++++++++++++++++++++++++++++++++++
function showImage() {
	document.getElementById("battleNumber").innerHTML = "Battle No."+numQuestion+"<br>"+Math.floor(finishSize*100/totalSize)+"% sorted.";
	document.getElementById("leftField").textContent = toNameFace(lstMember[cmp1][head1]);
	document.getElementById("rightField").textContent = toNameFace(lstMember[cmp2][head2]);

	numQuestion++;
}

//Convert numeric value into a name (emoticon)+++++++++++++++++++++++++++++++
function toNameFace(n){
	var str = namMember[n];

	/*
	str += '<br />';
	switch(n) {
		//case -1 Because it is a sample, delete it
		case -1: str+=""; break;
	}*/
	return str;
}
</script>
<style type="text/css">
body {
	text-align: center;
}
#mainTable {
	font-size: 16px;
	vertical-align: middle;
	margin-left: auto;
	margin-right: auto;
	border-collapse: separate;
	border-spacing: 10px 5px;
}
#battleNumber {
	padding-bottom: 10px;
}
#leftField,
#rightField {
	width: 200px;
	height: 150px;
	border: 1px solid #000;
	cursor: pointer;
}
.middleField {
	width: 120px;
	height: 70px;
	border: 1px solid #000;
	cursor: pointer;
}
a {
	color: #174;
	text-decoration : none;
}
a:hover {
	color: #6b9;
}
body {
	width: 600px;
	margin: 0 auto;
}
table.results {
	width:200px;
	font-size:12px;
	line-height:120%;
	margin-left:auto;
	margin-right:auto;
	border:1px solid #000;
	border-collapse:collapse;
}

table.results thead td,
table.results thead th {
	color:#ffffff;
	background-color:#000;
	text-align: center;
}
table.results td,
table.results th {
	border: 1px solid #000;
	padding: 0 5px;
}
table.results th {
	text-align: right;
	font-weight: normal;
}

</style>
</head>
<body>
	
<p class="instructions">
	My Little Pony character sorter. Choose your favorite character out of the two shown to get a list of your favorite characters as calculated by this character sorter. <br/><br/>
	<a href="http://www.reddit.com/r/mylittlepony/comments/18rpyp/get_ready_to_make_some_tough_choices/c8hjwz1" target="_blank">Hi r/MyLittlePony! &lt;3</a> <br/><br/>
	Copied from <a href="https://web.archive.org/web/20160305122402/http://tylian.net/sort/pony.html">the Wayback Machine</a> by <a href="https://twitter.com/FlynnMLP">FlynnMLP</a>.
</p>

<table id="mainTable">
	<tbody><tr>
		<td id="battleNumber" colspan="3">Battle No.1<br>0% sorted.</td>
	</tr>
	<tr>
		<td id="leftField" onclick="if(finishFlag==0) sortList(-1);" rowspan="2"></td>
		<td class="middleField" onclick="if(finishFlag==0) sortList(0);">I Like Both</td>
		<td id="rightField" onclick="if(finishFlag==0) sortList(1);" rowspan="2"></td>
	</tr>
	<tr>
		<td class="middleField" onclick="if(finishFlag==0) sortList(0);">No Opinion</td>
	</tr>
</tbody></table>
<br><br>
<div id="resultField">
<br><br>
</div>
<script type="text/javascript">
	initList();
	showImage();
</script>
</body>
</html>
